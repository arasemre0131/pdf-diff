import { useState } from 'react';
import { 
  FileUploadZone, 
  ComparisonResults, 
  PDFViewer,
  Button,
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  Alert,
  AlertDescription,
  Progress,
  Separator
} from '@pdf-diff/ui';
import { FileText, AlertCircle } from 'lucide-react';
import { toast } from 'sonner';

interface ComparisonResult {
  success: boolean;
  message?: string;
  differences?: any;
  similarity_score?: number;
  total_pages?: number;
  [key: string]: any;
}

export default function App() {
  const [file1, setFile1] = useState<File | null>(null);
  const [file2, setFile2] = useState<File | null>(null);
  const [isComparing, setIsComparing] = useState(false);
  const [results, setResults] = useState<ComparisonResult | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [progress, setProgress] = useState(0);

  // Backend API URL - can be configured via environment variable
  const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000';

  const handleCompare = async () => {
    if (!file1 || !file2) {
      setError('LÃ¼tfen karÅŸÄ±laÅŸtÄ±rma yapmadan Ã¶nce her iki PDF dosyasÄ±nÄ± da yÃ¼kleyin.');
      toast.error('LÃ¼tfen her iki PDF dosyasÄ±nÄ± da yÃ¼kleyin');
      return;
    }

    setIsComparing(true);
    setError(null);
    setResults(null);
    setProgress(0);

    // Simulate progress
    const progressInterval = setInterval(() => {
      setProgress((prev) => {
        if (prev >= 90) {
          clearInterval(progressInterval);
          return 90;
        }
        return prev + 10;
      });
    }, 200);

    try {
      const formData = new FormData();
      formData.append('file1', file1);
      formData.append('file2', file2);

      const response = await fetch(`${API_BASE_URL}/api/compare`, {
        method: 'POST',
        body: formData,
      });

      clearInterval(progressInterval);
      setProgress(100);

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.detail || `Server error: ${response.status}`);
      }

      const data = await response.json();
      setResults(data);
      toast.success('KarÅŸÄ±laÅŸtÄ±rma baÅŸarÄ±yla tamamlandÄ±!');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'PDF karÅŸÄ±laÅŸtÄ±rmasÄ± baÅŸarÄ±sÄ±z oldu';
      setError(errorMessage);
      toast.error(errorMessage);
    } finally {
      setIsComparing(false);
    }
  };

  const handleReset = () => {
    setFile1(null);
    setFile2(null);
    setResults(null);
    setError(null);
    setProgress(0);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 p-4">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-2">
            <FileText className="w-8 h-8 text-blue-600" />
            <h1 className="text-4xl font-bold text-slate-900">PDF KarÅŸÄ±laÅŸtÄ±rma AracÄ±</h1>
          </div>
          <p className="text-slate-600">Ä°ki PDF dosyasÄ±nÄ± yÃ¼kleyin ve farklÄ±lÄ±klarÄ±nÄ± bulun</p>
        </div>

        {/* Main Content */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
          {/* File Upload Section */}
          <Card className="lg:col-span-2">
            <CardHeader>
              <CardTitle>PDF DosyalarÄ± YÃ¼kleyin</CardTitle>
              <CardDescription>
                KarÅŸÄ±laÅŸtÄ±rmak iÃ§in iki PDF dosyasÄ±nÄ± seÃ§in
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <p className="text-sm font-medium text-slate-700 mb-2">
                    Dosya 1 {file1 && <span className="text-green-600">âœ“</span>}
                  </p>
                  <FileUploadZone
                    onFileSelect={setFile1}
                    label="Birinci PDF dosyasÄ±nÄ± yÃ¼kleyin"
                  />
                  {file1 && (
                    <p className="text-xs text-slate-600 mt-2 truncate">
                      ðŸ“„ {file1.name}
                    </p>
                  )}
                </div>

                <div>
                  <p className="text-sm font-medium text-slate-700 mb-2">
                    Dosya 2 {file2 && <span className="text-green-600">âœ“</span>}
                  </p>
                  <FileUploadZone
                    onFileSelect={setFile2}
                    label="Ä°kinci PDF dosyasÄ±nÄ± yÃ¼kleyin"
                  />
                  {file2 && (
                    <p className="text-xs text-slate-600 mt-2 truncate">
                      ðŸ“„ {file2.name}
                    </p>
                  )}
                </div>
              </div>

              {/* Progress Bar */}
              {isComparing && (
                <div className="space-y-2">
                  <div className="flex justify-between items-center text-sm">
                    <span className="text-slate-700">KarÅŸÄ±laÅŸtÄ±rma yapÄ±lÄ±yor...</span>
                    <span className="text-slate-600">{Math.round(progress)}%</span>
                  </div>
                  <Progress value={progress} className="h-2" />
                </div>
              )}

              {/* Error Alert */}
              {error && (
                <Alert className="border-red-200 bg-red-50">
                  <AlertCircle className="h-4 w-4 text-red-600" />
                  <AlertDescription className="text-red-800">
                    {error}
                  </AlertDescription>
                </Alert>
              )}

              {/* Action Buttons */}
              <div className="flex gap-3">
                <Button
                  onClick={handleCompare}
                  disabled={!file1 || !file2 || isComparing}
                  className="flex-1"
                >
                  {isComparing ? 'KarÅŸÄ±laÅŸtÄ±rÄ±lÄ±yor...' : 'KarÅŸÄ±laÅŸtÄ±r'}
                </Button>
                {(file1 || file2 || results) && (
                  <Button
                    onClick={handleReset}
                    variant="outline"
                    disabled={isComparing}
                  >
                    SÄ±fÄ±rla
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Separator */}
        {results && <Separator className="my-6" />}

        {/* Results Section */}
        {results && (
          <ComparisonResults results={results} />
        )}

        {/* PDF Viewer */}
        {results && file1 && file2 && (
          <Card className="mt-6">
            <CardHeader>
              <CardTitle>PDF GÃ¶rÃ¼ntÃ¼leyici</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                <div>
                  <p className="text-sm font-medium text-slate-700 mb-2">
                    Dosya 1
                  </p>
                  <PDFViewer file={file1} />
                </div>
                <div>
                  <p className="text-sm font-medium text-slate-700 mb-2">
                    Dosya 2
                  </p>
                  <PDFViewer file={file2} />
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
